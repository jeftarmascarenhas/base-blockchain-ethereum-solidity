// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/*
  Fun√ß√µes s√£o m√©todos pelos quais se podem interagir ou criar
  funcionalidades para os contratos
*/

// Visibilidade de fun√ß√µes

/* 
External: As fun√ß√µes externas fazem parte da interface do contrato,
o que significa que podem ser chamadas de outros contratos e por meio de transa√ß√µes.
Uma fun√ß√£o externa f n√£o pode ser chamada internamente
*/

/* 
Public: As fun√ß√µes p√∫blicas fazem parte da interface do contrato e
podem ser chamadas internamente ou por meio de chamadas de mensagens.
*/

/* 
Internal: As fun√ß√µes internas s√≥ podem ser acessadas a partir do contrato atual 
ou dos contratos derivados dele. Eles n√£o podem ser acessados ‚Äã‚Äãexternamente. 
Como n√£o s√£o expostos ao exterior por meio da ABI do contrato, podem receber par√¢metros 
de tipos internos como mapeamentos ou refer√™ncias de armazenamento.
*/

/* 
Private: As fun√ß√µes privadas s√£o como as internas, mas n√£o s√£o vis√≠veis em contratos derivados.
*/

/*
Fun√ß√µes Private ou External apenas impede que outros contratos leiam ou modificam as informa√ß√£o,
mas ainda ser√° vis√≠vel para todos no blockchain.
*/

/* Anatomia de uma fun√ß√£o:

function (<Tipos de Param√™tros>) {(visibilidade) internal| external | public}
[pure | view | payable] returns(<Tipos de retornos>) {
    Corpo da fun√ß√£o.
}
*/

contract HelperFuctions {
    // string public saudacao = unicode"Ol√° sou uma vari√°vel ü¶Ñ";

    function somaPublic(uint256 x, uint256 y) public pure returns (uint256) {
        return x + y;
    }

    function subExternal(uint256 x, uint256 y) external pure returns (uint256) {
        return x - y;
    }

    function fnInternal() internal pure {
        uint256 x = 50;
    }

    function multPrivate(uint256 x, uint256 y) private pure returns (uint256) {
        //subExternal(1,2); // N√£o √© vis√≠vel no contrato, no caso n√£o pode ser acessada
        return x * y;
    }
}

contract ContractA {
    HelperFuctions helperFn = new HelperFuctions();

    function somefunctionA() public view {
        helperFn.somaPublic(2, 2);
        helperFn.subExternal(1, 2);
        // helperFn.num2Internal(); // N√£o √© vis√≠vel
        // helperFn.multPrivate(3,2); // N√£o √© vis√≠vel
    }
}

// class ContractB extends Functions {}

contract ContractB is HelperFuctions {
    function somefunctionA() public pure {
        somaPublic(2, 2);
        // subExternal(2, 1); // N√£o √© vis√≠vel pq √© um contrato derivado
        fnInternal();
        // multPrivate(1,2); // N√£o √© vis√≠vel pq √© um contrato derivado
    }
}
